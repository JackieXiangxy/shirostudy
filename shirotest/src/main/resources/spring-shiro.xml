<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--配置securityManager	-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!--		 <property name="sessionMode" value="native"/>-->
        <!--		 <property name="cacheManager" value="cacheManager"/>-->
    </bean>
    <!--	可以自定义在springIOC容器中shiro bean的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="permissionsLookupEnabled" value="true"/>
    </bean>


    <!--	配置shiroFilter
            id必须和web.xml中的 DelegatingFilterProxy的<filter-name>一致
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--        页面首页-->
        <!--        <property name="indexUrl" value="/login"/>-->
        <!--    登陆页面-->
        <property name="loginUrl" value="/login.jsp"/>
        <!--        登陆成功后页面-->
        <property name="successUrl" value="/home"/>
        <!--        没有权限的页面-->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="logout" value-ref="logoutFilter" />
            </util:map>
        </property> -->
        <!--
        配置的哪些页面需要受保护以及访问这些页面需要的权限
        anon：可以匿名访问
        authc：必须登陆
        -->
        <property name="filterChainDefinitions">
            <value>
                /login = anon
                /logout = anon
                /error = anon
                /** = user
                /admin/** = authc, roles[admin]
                /docs/** = authc, perms[document:read]

                # more URL-to-FilterChain definitions here
            </value>
        </property>
    </bean>


    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!--启用ioc容器中使用shiro的注解，但必须在配置了lifecycleBeanPostProcessor之后才使用	-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>


</beans>
